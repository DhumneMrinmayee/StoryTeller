{\rtf1\ansi\ansicpg1252\cocoartf2636
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;\red191\green100\blue38;\red32\green32\blue32;\red153\green168\blue186;
\red109\green109\blue109;\red86\green132\blue173;\red254\green187\blue91;\red152\green54\blue29;\red88\green118\blue71;
\red117\green114\blue185;\red41\green50\blue40;}
{\*\expandedcolortbl;;\csgenericrgb\c74902\c39216\c14902;\csgenericrgb\c12549\c12549\c12549;\csgenericrgb\c60000\c65882\c72941;
\csgenericrgb\c42745\c42745\c42745;\csgenericrgb\c33725\c51765\c67843;\csgenericrgb\c99608\c73333\c35686;\csgenericrgb\c59608\c21176\c11373;\csgenericrgb\c34510\c46275\c27843;
\csgenericrgb\c45882\c44706\c72549;\csgenericrgb\c16078\c19608\c15686;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs26 \cf2 \cb3 import \cf4 os\
\cf2 from \cf4 typing \cf2 import \cf4 List\
\
\cf2 import \cf4 openai\
\cf2 import \cf4 argparse  \cf5 # Python Command-Line Parsing Libraries\
\cf2 import \cf4 re\
\
max_input_length = \cf6 8000\
\
\
\cf2 def \cf7 main\cf4 ():\
    parser = argparse.ArgumentParser(\cf8 description\cf4 =\cf9 "Content writing"\cf4 )\
    parser.add_argument(\cf9 "--Level"\cf2 , \cf9 "-l"\cf2 , \cf8 type\cf4 =\cf10 str\cf2 , \cf8 required\cf4 =\cf2 True, \cf8 help\cf4 =\cf9 'Level of expertise: Beginner, Intermediate, '\
                                                                       'Expert'\cf4 )\
    parser.add_argument(\cf9 "--Experience"\cf2 , \cf9 "-e"\cf2 , \cf8 type\cf4 =\cf10 int\cf2 , \cf8 required\cf4 =\cf2 True, \cf8 help\cf4 =\cf9 'Experience years in the field'\cf4 )\
    parser.add_argument(\cf9 "--input"\cf2 , \cf9 "-i"\cf2 , \cf8 type\cf4 =\cf10 str\cf2 , \cf8 required\cf4 =\cf2 True, \cf8 help\cf4 =\cf9 'Paste your snippet'\cf4 )\
    arguments = parser.parse_args()\
    user = arguments.input\
\
    \cf5 # user_prompt = arguments.input\
    \cf2 if \cf4 valid_len(user):\
        create_tagline(user)\
        create_keyword(user)\
    \cf2 else\cf4 :\
        \cf2 raise \cf10 ValueError\cf4 (\
            \cf9 f"Prompt exceed the character limit. It must be under \cf2 \{\cf4 max_input_length\cf2 \}\cf9 .submitted input is\cf2 \{\cf4 user\cf2 \}\cf9 "\cf4 )\
\
\
\cf5 # function for deciding maximum valid input character length\
\
\
\cf2 def \cf7 valid_len\cf4 (snippet: \cf10 str\cf4 ) -> \cf10 tuple\cf4 [\cf10 bool\cf4 ]:\
    \cf2 return \cf10 len\cf4 (snippet) <= max_input_length\
\
\
\cf5 # Load your API key from an environment variable or secret management service\
\
\
\cf2 def \cf7 create_tagline\cf4 (snippet):\
    openai.api_key = os.getenv(\cf9 "OPENAI_API_KEY"\cf4 )\
    prompt = \cf9 f" I am a creative writing\cf2 \{\cf4 Level\cf2 \}\cf9 . I have been a professional editor for \cf2 \{\cf4 Experience\cf2 \}\cf9  years. I am going to " \cf4 \\\
             \cf9 f"provide you following short story and you will give " \cf4 \\\
             \cf9 f"me a critical feedback to improve my prose. You will hold me to the highest literary standards, " \cf4 \\\
             \cf9 f"and your feedback will be open-ended and include examples or suggestions. You will also commend me " \cf4 \\\
             \cf9 f"where I did well. Story Starts \cf2 \{\cf4 snippet\cf2 \}\cf9 : Story ends. \cf2 \\n\cf9  I will now give you one or two paragraphs of " \cf4 \\\
             \cf9 f"critical feedback to improve your prose and style "\
    \cf4 response = openai.Completion.create(\cf8 model\cf4 =\cf9 "text-curie-001"\cf2 ,\
                                        \cf8 prompt\cf4 =prompt\cf2 ,\
                                        \cf8 temperature\cf4 =\cf6 0\cf2 , \cf8 max_tokens\cf4 =\cf6 250\cf4 )\
\
    tagline_text: \cf10 str \cf4 = response[\cf9 "choices"\cf4 ][\cf6 0\cf4 ][\cf9 "text"\cf4 ]  \cf5 # extract only output text\
    \cf4 tagline_text = tagline_text.strip()  \cf5 # removing white space within output text\
    \cf4 end_char = tagline_text[-\cf6 1\cf4 ]\
    \cf2 if \cf4 end_char \cf2 not in \cf4 \{\cf9 "."\cf2 , \cf9 "!"\cf2 , \cf9 "?"\cf4 \}:  \cf5 # ending of the output text:  Added "..." for truncate the text\
        \cf4 tagline_text += \cf9 "...!"\
\
    \cf10 print\cf4 (\cf9 "Result:"\cf2 , \cf4 tagline_text)\
    \cf2 return \cf4 tagline_text\
\
\
\cf2 def \cf7 create_keyword\cf4 (words: \cf10 str\cf4 ) -> List[\cf10 str\cf4 ]:\
    openai.api_key = os.getenv(\cf9 "OPENAI_API_KEY"\cf4 )\
    prompt = \cf9 f"Creative keywords network for the product \cf2 \{\cf4 words\cf2 \}\cf9 : "\
    \cf10 print\cf4 (prompt)\
\
    response = openai.Completion.create(\cf8 model\cf4 =\cf9 "text-curie-001"\cf2 ,\
                                        \cf8 prompt\cf4 =prompt\cf2 ,\
                                        \cf8 temperature\cf4 =\cf6 0\cf2 , \cf8 max_tokens\cf4 =\cf6 32\cf4 )\
    \cf5 # print(response)\
\
    \cf4 keywords: \cf10 str \cf4 = response[\cf9 "choices"\cf4 ][\cf6 0\cf4 ][\cf9 "text"\cf4 ]  \cf5 # extract only output text\
    \cf4 keywords = keywords.strip()\
    word_array = re.split(\cf9 "\cb11 ,| \cf2 \\n\cf9  |;|- \cb3 "\cf2 , \cf4 keywords)\
    word_array = [a.lower().split() \cf2 for \cf4 a \cf2 in \cf4 word_array]\
    word_array = [a \cf2 for \cf4 a \cf2 in \cf4 word_array \cf2 if \cf10 len\cf4 (a) > \cf6 0\cf4 ]\
\
    \cf10 print\cf4 (\cf9 "Keywords:"\cf2 , \cf4 word_array)\
    \cf2 return \cf4 word_array\
\
\
\cf2 if \cf4 __name__ == \cf9 "__main__"\cf4 :\
    main()\
\
}